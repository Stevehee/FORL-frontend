{"ast":null,"code":"import _toConsumableArray from\"/Users/hechengxin/Desktop/First-Order-Rule-Learner/FOIL/src/main/frontend/foil-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"/Users/hechengxin/Desktop/First-Order-Rule-Learner/FOIL/src/main/frontend/foil-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/hechengxin/Desktop/First-Order-Rule-Learner/FOIL/src/main/frontend/foil-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/hechengxin/Desktop/First-Order-Rule-Learner/FOIL/src/main/frontend/foil-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import'./App.css';import{PlusOutlined,UploadOutlined}from'@ant-design/icons';import{Button,Cascader,Checkbox,DatePicker,Form,Input,InputNumber,Radio,Select,Slider,Switch,TreeSelect,Upload}from'antd';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),file=_useState2[0],setFile=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),param1=_useState4[0],setParam1=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),param2=_useState6[0],setParam2=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),param3=_useState8[0],setParam3=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),response=_useState10[0],setResponse=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),isLoading=_useState12[0],setIsLoading=_useState12[1];var _useState13=useState(''),_useState14=_slicedToArray(_useState13,2),additionalParams=_useState14[0],setAdditionalParams=_useState14[1];var _useState15=useState({headers:[],data:[]}),_useState16=_slicedToArray(_useState15,2),tableData=_useState16[0],setTableData=_useState16[1];var _useState17=useState(''),_useState18=_slicedToArray(_useState17,2),numOfRules=_useState18[0],setNumOfRules=_useState18[1];var parseFile=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(file){var content,rows,headers,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return file.text();case 2:content=_context.sent;rows=content.split('\\n').filter(function(row){return row;}).slice(0,10);// slice(0, 10) to get only the top 10 rows\nheaders=rows[0].split(',');// Assuming CSV format\ndata=rows.slice(1).map(function(row){return row.split(',');});setTableData({headers:headers,data:data});case 7:case\"end\":return _context.stop();}},_callee);}));return function parseFile(_x){return _ref.apply(this,arguments);};}();var handleFileChange=function handleFileChange(file){setFile(file);parseFile(file).then(function(){console.log(\"file uploaded\");});};var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var formData,paramsArray,allParams,url,res,result;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:setIsLoading(true);formData=new FormData();formData.append('file',file);// Parsing the additionalParams to append to the URL\nparamsArray=additionalParams.split(',').filter(function(p){return p.trim()!=='';}).map(function(p){return\"args=\".concat(p.trim());});allParams=[\"args=\".concat(param1),\"args=\".concat(param2)].concat(_toConsumableArray(paramsArray),[\"args=\".concat(param3),\"args=\".concat(numOfRules)]).filter(Boolean);// This will remove any falsey values, just in case any parameter is undefined or empty\nurl=\"http://localhost:8080/upload?\".concat(allParams.join('&'));_context2.prev=6;_context2.next=9;return fetch(url,{method:'POST',body:formData});case 9:res=_context2.sent;_context2.next=12;return res.text();case 12:result=_context2.sent;setResponse(result);_context2.next=20;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](6);console.error('Error uploading file:',_context2.t0);setResponse('Error uploading file: '+_context2.t0.message);case 20:_context2.prev=20;setIsLoading(false);return _context2.finish(20);case 23:case\"end\":return _context2.stop();}},_callee2,null,[[6,16,20,23]]);}));return function handleSubmit(){return _ref2.apply(this,arguments);};}();function DataTable(_ref3){var headers=_ref3.headers,data=_ref3.data;return/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:headers.map(function(header,index){return/*#__PURE__*/_jsx(\"th\",{children:header},index);})})}),/*#__PURE__*/_jsx(\"tbody\",{children:data.map(function(row,rowIndex){return/*#__PURE__*/_jsx(\"tr\",{children:row.map(function(cell,cellIndex){return/*#__PURE__*/_jsx(\"td\",{children:cell},cellIndex);})},rowIndex);})})]});}var normFile=function normFile(e){if(Array.isArray(e)){return e;}return e===null||e===void 0?void 0:e.fileList;};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"app-header\",children:\"First-order Rule Learner\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"introduction-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to the First-Order Rule Learner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This tool utilizes the FOIL (First-Order Inductive Learner) algorithm to derive first-order rules in the form of Horn clauses from relational datasets. Please note that the current version is optimized for categorical data.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(Form,{labelCol:{span:4},wrapperCol:{span:10},layout:\"horizontal\",children:[/*#__PURE__*/_jsx(Form.Item,{label:\"Upload\",valuePropName:\"fileList\",getValueFromEvent:normFile,children:/*#__PURE__*/_jsx(Upload,{beforeUpload:function beforeUpload(file){handleFileChange(file);return false;},multiple:\"false\",maxCount:1,listType:\"picture-card\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(PlusOutlined,{}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:8},children:\"Upload\"})]})})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Target Literal\",onChange:function onChange(e){return setParam1(e.target.value);},children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Num of args\",onChange:function onChange(e){return setParam2(e.target.value);},children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Arguments\",onChange:function onChange(e){return setAdditionalParams(e.target.value);},children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Rule Size\",onChange:function onChange(e){return setParam3(e.target.value);},children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Num of Rules\",onChange:function onChange(e){return setNumOfRules(e.target.value);},children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(Form.Item,{label:\"Submit\",children:/*#__PURE__*/_jsx(Button,{type:\"primary\",loading:isLoading,onClick:handleSubmit,children:\"Upload\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"intro-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"How to Use\"}),/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"DataSet:\"}),\" Upload your relational data in a .csv format. After successful upload, the first 10 rows of your dataset will be showcased in the DataSet section below.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Target Literal:\"}),\" Specify the target literal you aim to predict. It typically represents a column in your dataset and serves as the positive literal in a Horn Clause.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Num of Args:\"}),\" Indicate the number of arguments for your target literal. For instance, isGreater(X) contains a single argument, while \",/*#__PURE__*/_jsx(_Fragment,{children:\"Education(X, Bachelors)\"}),\" contains two.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Arguments:\"}),\" Provide any additional arguments you'd like to set for the target literal. For example, if the target literal is \",/*#__PURE__*/_jsx(_Fragment,{children:\"Education(X, Bachelors)\"}),\", input 'Bachelors' in this field.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Rule Size:\"}),\" Define the number of (negative) literals in the first order rule you wish to learn\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Num of Rules:\"}),\" Set the upper limit for the number of rules you'd like the algorithm to generate.\"]})]}),/*#__PURE__*/_jsx(\"p\",{children:\"After setting your preferences, proceed to initiate the learning process. Learned rules will be displayed in the bottom section with their empirical probability. (Larger dataset like Adult.csv might take a while to finish if you wish to learn multiple rules)\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Here are some available DataSet you can use:\"}),/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://drive.google.com/file/d/103Lh1MC24oDpLSuIVow3BewFPRXN4OxU/view?usp=sharing\",children:\"Adult.csv\"}),\" (Target Literal: isGreater, Num of Args: 1, Arguments: (empty)) \"]}),\"Predict whether income exceeds $50K/yr based on census data. Also known as \\\"Census Income\\\" dataset.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[/*#__PURE__*/_jsx(\"a\",{href:\"https://drive.google.com/file/d/1DISTIC0lIXsjjvWBXk9gN7K-7ur89Ot1/view?usp=sharing\",children:\"Car.csv\"}),\" \"]}),\"Used to predict the quality of a Car. Find more info \",/*#__PURE__*/_jsx(\"a\",{href:\"https://archive.ics.uci.edu/dataset/19/car+evaluation\",children:\"here\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[/*#__PURE__*/_jsx(\"a\",{href:\"https://drive.google.com/file/d/11tGaRIkIT1IxB56C1TVLcXaxiJUetOEa/view?usp=sharing\",children:\"House.csv\"}),\" \"]}),\"1984 United Stated Congressional Voting Records; Classify as Republican or Democrat. Find more info \",/*#__PURE__*/_jsx(\"a\",{href:\"https://archive.ics.uci.edu/dataset/105/congressional+voting+records\",children:\"here\"})]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[/*#__PURE__*/_jsx(\"a\",{href:\"https://drive.google.com/file/d/1H7lwSgg3siikVKcbWALGRi59TaCheQje/view?usp=sharing\",children:\"Mushroom.csv\"}),\" \"]}),\"From Audobon Society Field Guide; mushrooms described in terms of physical characteristics; classification: poisonous or edible. Find more info \",/*#__PURE__*/_jsx(\"a\",{href:\"https://archive.ics.uci.edu/dataset/73/mushroom\",children:\"here\"})]})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"data-section\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Dataset (displaying first ten rows):\"}),tableData.data&&tableData.headers&&/*#__PURE__*/_jsx(DataTable,{headers:tableData.headers,data:tableData.data})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"response-container\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Rules Learned:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"response-box\",children:response.split('\\n').map(function(line,index){return/*#__PURE__*/_jsx(\"div\",{className:\"response-line\",children:line.includes(':')?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"confidence-value\",children:line.split(':')[0]}),/*#__PURE__*/_jsx(\"span\",{className:\"rule\",children:line.split(':')[1]})]}):line},index);})})]})]});}export default App;","map":{"version":3,"names":["React","useState","PlusOutlined","UploadOutlined","Button","Cascader","Checkbox","DatePicker","Form","Input","InputNumber","Radio","Select","Slider","Switch","TreeSelect","Upload","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","_useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","param1","setParam1","_useState5","_useState6","param2","setParam2","_useState7","_useState8","param3","setParam3","_useState9","_useState10","response","setResponse","_useState11","_useState12","isLoading","setIsLoading","_useState13","_useState14","additionalParams","setAdditionalParams","_useState15","headers","data","_useState16","tableData","setTableData","_useState17","_useState18","numOfRules","setNumOfRules","parseFile","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","content","rows","wrap","_callee$","_context","prev","next","text","sent","split","filter","row","slice","map","stop","_x","apply","arguments","handleFileChange","then","console","log","handleSubmit","_ref2","_callee2","formData","paramsArray","allParams","url","res","result","_callee2$","_context2","FormData","append","p","trim","concat","_toConsumableArray","Boolean","join","fetch","method","body","t0","error","message","finish","DataTable","_ref3","children","header","index","rowIndex","cell","cellIndex","normFile","e","Array","isArray","fileList","className","labelCol","span","wrapperCol","layout","Item","label","valuePropName","getValueFromEvent","beforeUpload","multiple","maxCount","listType","style","marginTop","onChange","target","value","type","loading","onClick","href","line","includes"],"sources":["/Users/hechengxin/Desktop/First-Order-Rule-Learner/FOIL/src/main/frontend/foil-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport {PlusOutlined, UploadOutlined} from '@ant-design/icons';\n\nimport {\n    Button,\n    Cascader,\n    Checkbox,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    Radio,\n    Select,\n    Slider,\n    Switch,\n    TreeSelect,\n    Upload,\n} from 'antd';\n\n\nfunction App() {\n    const [file, setFile] = useState(null);\n    const [param1, setParam1] = useState('');\n    const [param2, setParam2] = useState('');\n    const [param3, setParam3] = useState('');\n    const [response, setResponse] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [additionalParams, setAdditionalParams] = useState('');\n    const [tableData, setTableData] = useState({ headers: [], data: [] });\n    const [numOfRules, setNumOfRules] = useState('');\n\n\n\n\n    const parseFile =  async (file) => {\n        const content = await file.text();\n        const rows = content.split('\\n').filter(row => row).slice(0, 10); // slice(0, 10) to get only the top 10 rows\n        const headers = rows[0].split(','); // Assuming CSV format\n        const data = rows.slice(1).map(row => row.split(','));\n\n        setTableData({ headers, data });\n    };\n\n\n\n    const handleFileChange = (file) => {\n        setFile(file);\n        parseFile(file).then(()=>{console.log(\"file uploaded\")});\n    };\n\n    const handleSubmit = async () => {\n        setIsLoading(true);\n\n        const formData = new FormData();\n        formData.append('file', file);\n\n        // Parsing the additionalParams to append to the URL\n        const paramsArray = additionalParams.split(',')\n            .filter(p => p.trim() !== '')\n            .map(p => `args=${p.trim()}`);\n\n        const allParams = [\n            `args=${param1}`,\n            `args=${param2}`,\n            ...paramsArray,\n            `args=${param3}`,\n            `args=${numOfRules}`\n        ].filter(Boolean); // This will remove any falsey values, just in case any parameter is undefined or empty\n\n        const url = `http://localhost:8080/upload?${allParams.join('&')}`;\n\n        try {\n            const res = await fetch(url, {\n                method: 'POST',\n                body: formData,\n            });\n\n            const result = await res.text();\n            setResponse(result);\n        } catch (error) {\n            console.error('Error uploading file:', error);\n            setResponse('Error uploading file: ' + error.message);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    function DataTable({ headers, data }) {\n        return (\n            <table>\n                <thead>\n                <tr>\n                    {headers.map((header, index) => <th key={index}>{header}</th>)}\n                </tr>\n                </thead>\n                <tbody>\n                {data.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                        {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        );\n    }\n\n    const normFile = (e) => {\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e?.fileList;\n    };\n\n\n    return (\n        <div className=\"app-container\">\n            <header className=\"app-header\">\n                First-order Rule Learner\n            </header>\n\n            <div className=\"introduction-box\">\n                <h2>Welcome to the First-Order Rule Learner</h2>\n                <p>This tool utilizes the FOIL (First-Order Inductive Learner) algorithm to derive first-order rules in the form of Horn clauses from relational datasets. Please note that the current version is optimized for categorical data.</p>\n            </div>\n\n            <div className=\"App\">\n                <Form\n                    labelCol={{ span: 4 }}\n                    wrapperCol={{ span: 10 }}\n                    layout=\"horizontal\"\n                >\n                    <Form.Item label=\"Upload\" valuePropName=\"fileList\" getValueFromEvent={normFile}>\n                        <Upload beforeUpload={(file) => {\n                                handleFileChange((file)) ;\n                                return false} }\n                                multiple=\"false\"\n                                maxCount={1}\n                                listType=\"picture-card\"\n                        >\n                            <div>\n                                <PlusOutlined />\n                                <div style={{ marginTop: 8 }}>Upload</div>\n                            </div>\n                        </Upload>\n                    </Form.Item>\n\n                    <Form.Item label=\"Target Literal\"\n                               onChange={(e) => setParam1(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Num of args\"\n                               onChange={(e) => setParam2(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Arguments\"\n                               onChange={(e) => setAdditionalParams(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Rule Size\"\n                               onChange={(e) => setParam3(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item label=\"Num of Rules\"\n                               onChange={(e) => setNumOfRules(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item label=\"Submit\">\n                        <Button\n                            type=\"primary\"\n                            loading={isLoading}\n                            onClick={handleSubmit}>\n                            Upload\n                        </Button>\n                    </Form.Item>\n                </Form>\n\n\n                <div className=\"intro-section\">\n                    <h3>How to Use</h3>\n                    <ol>\n                        <li>\n                            <strong>DataSet:</strong> Upload your relational data in a .csv format. After successful upload, the first 10 rows of your dataset will be showcased in the DataSet section below.\n                        </li>\n                        <li>\n                            <strong>Target Literal:</strong> Specify the target literal you aim to predict. It typically represents a column in your dataset and serves as the positive literal in a Horn Clause.\n                        </li>\n                        <li>\n                            <strong>Num of Args:</strong> Indicate the number of arguments for your target literal. For instance, isGreater(X) contains a single argument, while <>Education(X, Bachelors)</> contains two.\n                        </li>\n                        <li>\n                            <strong>Arguments:</strong> Provide any additional arguments you'd like to set for the target literal. For example, if the target literal is <>Education(X, Bachelors)</>, input 'Bachelors' in this field.\n                        </li>\n                        <li>\n                            <strong>Rule Size:</strong> Define the number of (negative) literals in the first order rule you wish to learn\n                        </li>\n                        <li>\n                            <strong>Num of Rules:</strong> Set the upper limit for the number of rules you'd like the algorithm to generate.\n                        </li>\n                    </ol>\n                    <p>After setting your preferences, proceed to initiate the learning process. Learned rules will be displayed in the bottom section with their empirical probability. (Larger dataset like Adult.csv might take a while to finish if you wish to learn multiple rules)</p>\n\n                    <p>Here are some available DataSet you can use:</p>\n\n                    <ol>\n                        <li>\n                            <strong> <a href=\"https://drive.google.com/file/d/103Lh1MC24oDpLSuIVow3BewFPRXN4OxU/view?usp=sharing\">Adult.csv</a> (Target Literal: isGreater, Num of Args: 1, Arguments: (empty)) </strong>\n                            Predict whether income exceeds $50K/yr based on census data. Also known as \"Census Income\" dataset.\n\n                        </li>\n                        <li>\n                            <strong><a href=\"https://drive.google.com/file/d/1DISTIC0lIXsjjvWBXk9gN7K-7ur89Ot1/view?usp=sharing\">Car.csv</a> </strong>\n                            Used to predict the quality of a Car. Find more info <a href=\"https://archive.ics.uci.edu/dataset/19/car+evaluation\">here</a>\n                        </li>\n                        <li>\n                            <strong><a href=\"https://drive.google.com/file/d/11tGaRIkIT1IxB56C1TVLcXaxiJUetOEa/view?usp=sharing\">House.csv</a> </strong>\n                            1984 United Stated Congressional Voting Records; Classify as Republican or Democrat. Find more info <a href=\"https://archive.ics.uci.edu/dataset/105/congressional+voting+records\">here</a>\n                        </li>\n                        <li>\n                            <strong><a href=\"https://drive.google.com/file/d/1H7lwSgg3siikVKcbWALGRi59TaCheQje/view?usp=sharing\">Mushroom.csv</a> </strong>\n                            From Audobon Society Field Guide; mushrooms described in terms of physical characteristics; classification: poisonous or edible. Find more info <a href=\"https://archive.ics.uci.edu/dataset/73/mushroom\">here</a>\n                        </li>\n                    </ol>\n\n                </div>\n\n            </div>\n\n            <div className=\"data-section\">\n                <strong>Dataset (displaying first ten rows):</strong>\n                {tableData.data && tableData.headers && <DataTable headers={tableData.headers} data={tableData.data} />}\n            </div>\n\n\n            <div className=\"response-container\">\n                <strong>Rules Learned:</strong>\n                <div className=\"response-box\">\n                    {response.split('\\n').map((line, index) => (\n                        <div className=\"response-line\" key={index}>\n                            {line.includes(':') ? (\n                                <>\n                                <span className=\"confidence-value\">\n                                    {line.split(':')[0]}\n                                </span>\n                                    <span className=\"rule\">\n                                    {line.split(':')[1]}\n                                </span>\n                                </>\n                            ) : (\n                                line\n                            )}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"4sBAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,WAAW,CAClB,OAAQC,YAAY,CAAEC,cAAc,KAAO,mBAAmB,CAE9D,OACIC,MAAM,CACNC,QAAQ,CACRC,QAAQ,CACRC,UAAU,CACVC,IAAI,CACJC,KAAK,CACLC,WAAW,CACXC,KAAK,CACLC,MAAM,CACNC,MAAM,CACNC,MAAM,CACNC,UAAU,CACVC,MAAM,KACH,MAAM,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAGd,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,IAAAC,SAAA,CAAwBvB,QAAQ,CAAC,IAAI,CAAC,CAAAwB,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA/BG,IAAI,CAAAF,UAAA,IAAEG,OAAO,CAAAH,UAAA,IACpB,IAAAI,UAAA,CAA4B5B,QAAQ,CAAC,EAAE,CAAC,CAAA6B,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAjCE,MAAM,CAAAD,UAAA,IAAEE,SAAS,CAAAF,UAAA,IACxB,IAAAG,UAAA,CAA4BhC,QAAQ,CAAC,EAAE,CAAC,CAAAiC,UAAA,CAAAR,cAAA,CAAAO,UAAA,IAAjCE,MAAM,CAAAD,UAAA,IAAEE,SAAS,CAAAF,UAAA,IACxB,IAAAG,UAAA,CAA4BpC,QAAQ,CAAC,EAAE,CAAC,CAAAqC,UAAA,CAAAZ,cAAA,CAAAW,UAAA,IAAjCE,MAAM,CAAAD,UAAA,IAAEE,SAAS,CAAAF,UAAA,IACxB,IAAAG,UAAA,CAAgCxC,QAAQ,CAAC,EAAE,CAAC,CAAAyC,WAAA,CAAAhB,cAAA,CAAAe,UAAA,IAArCE,QAAQ,CAAAD,WAAA,IAAEE,WAAW,CAAAF,WAAA,IAC5B,IAAAG,WAAA,CAAkC5C,QAAQ,CAAC,KAAK,CAAC,CAAA6C,WAAA,CAAApB,cAAA,CAAAmB,WAAA,IAA1CE,SAAS,CAAAD,WAAA,IAAEE,YAAY,CAAAF,WAAA,IAC9B,IAAAG,WAAA,CAAgDhD,QAAQ,CAAC,EAAE,CAAC,CAAAiD,WAAA,CAAAxB,cAAA,CAAAuB,WAAA,IAArDE,gBAAgB,CAAAD,WAAA,IAAEE,mBAAmB,CAAAF,WAAA,IAC5C,IAAAG,WAAA,CAAkCpD,QAAQ,CAAC,CAAEqD,OAAO,CAAE,EAAE,CAAEC,IAAI,CAAE,EAAG,CAAC,CAAC,CAAAC,WAAA,CAAA9B,cAAA,CAAA2B,WAAA,IAA9DI,SAAS,CAAAD,WAAA,IAAEE,YAAY,CAAAF,WAAA,IAC9B,IAAAG,WAAA,CAAoC1D,QAAQ,CAAC,EAAE,CAAC,CAAA2D,WAAA,CAAAlC,cAAA,CAAAiC,WAAA,IAAzCE,UAAU,CAAAD,WAAA,IAAEE,aAAa,CAAAF,WAAA,IAKhC,GAAM,CAAAG,SAAS,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAC,QAAOzC,IAAI,MAAA0C,OAAA,CAAAC,IAAA,CAAAhB,OAAA,CAAAC,IAAA,QAAAW,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SACJ,CAAAhD,IAAI,CAACiD,IAAI,CAAC,CAAC,QAA3BP,OAAO,CAAAI,QAAA,CAAAI,IAAA,CACPP,IAAI,CAAGD,OAAO,CAACS,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAAC,SAAAC,GAAG,QAAI,CAAAA,GAAG,GAAC,CAACC,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAE;AAC5D3B,OAAO,CAAGgB,IAAI,CAAC,CAAC,CAAC,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAE;AAC9BvB,IAAI,CAAGe,IAAI,CAACW,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,SAAAF,GAAG,QAAI,CAAAA,GAAG,CAACF,KAAK,CAAC,GAAG,CAAC,GAAC,CAErDpB,YAAY,CAAC,CAAEJ,OAAO,CAAPA,OAAO,CAAEC,IAAI,CAAJA,IAAK,CAAC,CAAC,CAAC,wBAAAkB,QAAA,CAAAU,IAAA,MAAAf,OAAA,GACnC,kBAPK,CAAAL,SAASA,CAAAqB,EAAA,SAAApB,IAAA,CAAAqB,KAAA,MAAAC,SAAA,OAOd,CAID,GAAM,CAAAC,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAI5D,IAAI,CAAK,CAC/BC,OAAO,CAACD,IAAI,CAAC,CACboC,SAAS,CAACpC,IAAI,CAAC,CAAC6D,IAAI,CAAC,UAAI,CAACC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,EAAC,CAAC,CAC5D,CAAC,CAED,GAAM,CAAAC,YAAY,6BAAAC,KAAA,CAAA3B,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAA0B,SAAA,MAAAC,QAAA,CAAAC,WAAA,CAAAC,SAAA,CAAAC,GAAA,CAAAC,GAAA,CAAAC,MAAA,QAAAjC,mBAAA,GAAAK,IAAA,UAAA6B,UAAAC,SAAA,iBAAAA,SAAA,CAAA3B,IAAA,CAAA2B,SAAA,CAAA1B,IAAA,SACjB3B,YAAY,CAAC,IAAI,CAAC,CAEZ8C,QAAQ,CAAG,GAAI,CAAAQ,QAAQ,CAAC,CAAC,CAC/BR,QAAQ,CAACS,MAAM,CAAC,MAAM,CAAE5E,IAAI,CAAC,CAE7B;AACMoE,WAAW,CAAG5C,gBAAgB,CAAC2B,KAAK,CAAC,GAAG,CAAC,CAC1CC,MAAM,CAAC,SAAAyB,CAAC,QAAI,CAAAA,CAAC,CAACC,IAAI,CAAC,CAAC,GAAK,EAAE,GAAC,CAC5BvB,GAAG,CAAC,SAAAsB,CAAC,gBAAAE,MAAA,CAAYF,CAAC,CAACC,IAAI,CAAC,CAAC,GAAE,CAAC,CAE3BT,SAAS,CAAG,SAAAU,MAAA,CACN3E,MAAM,UAAA2E,MAAA,CACNvE,MAAM,GAAAuE,MAAA,CAAAC,kBAAA,CACXZ,WAAW,WAAAW,MAAA,CACNnE,MAAM,UAAAmE,MAAA,CACN7C,UAAU,IACpBkB,MAAM,CAAC6B,OAAO,CAAC,CAAE;AAEbX,GAAG,iCAAAS,MAAA,CAAmCV,SAAS,CAACa,IAAI,CAAC,GAAG,CAAC,EAAAR,SAAA,CAAA3B,IAAA,GAAA2B,SAAA,CAAA1B,IAAA,SAGzC,CAAAmC,KAAK,CAACb,GAAG,CAAE,CACzBc,MAAM,CAAE,MAAM,CACdC,IAAI,CAAElB,QACV,CAAC,CAAC,QAHII,GAAG,CAAAG,SAAA,CAAAxB,IAAA,CAAAwB,SAAA,CAAA1B,IAAA,UAKY,CAAAuB,GAAG,CAACtB,IAAI,CAAC,CAAC,SAAzBuB,MAAM,CAAAE,SAAA,CAAAxB,IAAA,CACZjC,WAAW,CAACuD,MAAM,CAAC,CAACE,SAAA,CAAA1B,IAAA,kBAAA0B,SAAA,CAAA3B,IAAA,IAAA2B,SAAA,CAAAY,EAAA,CAAAZ,SAAA,aAEpBZ,OAAO,CAACyB,KAAK,CAAC,uBAAuB,CAAAb,SAAA,CAAAY,EAAO,CAAC,CAC7CrE,WAAW,CAAC,wBAAwB,CAAGyD,SAAA,CAAAY,EAAA,CAAME,OAAO,CAAC,CAAC,QAAAd,SAAA,CAAA3B,IAAA,IAEtD1B,YAAY,CAAC,KAAK,CAAC,CAAC,OAAAqD,SAAA,CAAAe,MAAA,8BAAAf,SAAA,CAAAlB,IAAA,MAAAU,QAAA,uBAE3B,kBAnCK,CAAAF,YAAYA,CAAA,SAAAC,KAAA,CAAAP,KAAA,MAAAC,SAAA,OAmCjB,CAED,QAAS,CAAA+B,SAASA,CAAAC,KAAA,CAAoB,IAAjB,CAAAhE,OAAO,CAAAgE,KAAA,CAAPhE,OAAO,CAAEC,IAAI,CAAA+D,KAAA,CAAJ/D,IAAI,CAC9B,mBACInC,KAAA,UAAAmG,QAAA,eACIrG,IAAA,UAAAqG,QAAA,cACArG,IAAA,OAAAqG,QAAA,CACKjE,OAAO,CAAC4B,GAAG,CAAC,SAACsC,MAAM,CAAEC,KAAK,qBAAKvG,IAAA,OAAAqG,QAAA,CAAiBC,MAAM,EAAdC,KAAmB,CAAC,GAAC,CAC9D,CAAC,CACE,CAAC,cACRvG,IAAA,UAAAqG,QAAA,CACChE,IAAI,CAAC2B,GAAG,CAAC,SAACF,GAAG,CAAE0C,QAAQ,qBACpBxG,IAAA,OAAAqG,QAAA,CACKvC,GAAG,CAACE,GAAG,CAAC,SAACyC,IAAI,CAAEC,SAAS,qBAAK1G,IAAA,OAAAqG,QAAA,CAAqBI,IAAI,EAAhBC,SAAqB,CAAC,GAAC,EADzDF,QAEL,CAAC,EACR,CAAC,CACK,CAAC,EACL,CAAC,CAEhB,CAEA,GAAM,CAAAG,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,CAAC,CAAK,CACpB,GAAIC,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,CAAE,CAClB,MAAO,CAAAA,CAAC,CACZ,CACA,MAAO,CAAAA,CAAC,SAADA,CAAC,iBAADA,CAAC,CAAEG,QAAQ,CACtB,CAAC,CAGD,mBACI7G,KAAA,QAAK8G,SAAS,CAAC,eAAe,CAAAX,QAAA,eAC1BrG,IAAA,WAAQgH,SAAS,CAAC,YAAY,CAAAX,QAAA,CAAC,0BAE/B,CAAQ,CAAC,cAETnG,KAAA,QAAK8G,SAAS,CAAC,kBAAkB,CAAAX,QAAA,eAC7BrG,IAAA,OAAAqG,QAAA,CAAI,yCAAuC,CAAI,CAAC,cAChDrG,IAAA,MAAAqG,QAAA,CAAG,iOAA+N,CAAG,CAAC,EACrO,CAAC,cAENnG,KAAA,QAAK8G,SAAS,CAAC,KAAK,CAAAX,QAAA,eAChBnG,KAAA,CAACZ,IAAI,EACD2H,QAAQ,CAAE,CAAEC,IAAI,CAAE,CAAE,CAAE,CACtBC,UAAU,CAAE,CAAED,IAAI,CAAE,EAAG,CAAE,CACzBE,MAAM,CAAC,YAAY,CAAAf,QAAA,eAEnBrG,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAACC,iBAAiB,CAAEb,QAAS,CAAAN,QAAA,cAC3ErG,IAAA,CAACF,MAAM,EAAC2H,YAAY,CAAE,SAAAA,aAAChH,IAAI,CAAK,CACxB4D,gBAAgB,CAAE5D,IAAK,CAAC,CACxB,MAAO,MAAK,EAAG,CACfiH,QAAQ,CAAC,OAAO,CAChBC,QAAQ,CAAE,CAAE,CACZC,QAAQ,CAAC,cAAc,CAAAvB,QAAA,cAE3BnG,KAAA,QAAAmG,QAAA,eACIrG,IAAA,CAAChB,YAAY,GAAE,CAAC,cAChBgB,IAAA,QAAK6H,KAAK,CAAE,CAAEC,SAAS,CAAE,CAAE,CAAE,CAAAzB,QAAA,CAAC,QAAM,CAAK,CAAC,EACzC,CAAC,CACF,CAAC,CACF,CAAC,cAEZrG,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,gBAAgB,CACtBS,QAAQ,CAAE,SAAAA,SAACnB,CAAC,QAAK,CAAA9F,SAAS,CAAC8F,CAAC,CAACoB,MAAM,CAACC,KAAK,CAAC,EAAC,CAAA5B,QAAA,cAClDrG,IAAA,CAACT,KAAK,GAAE,CAAC,CACF,CAAC,cAGZS,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,aAAa,CACnBS,QAAQ,CAAE,SAAAA,SAACnB,CAAC,QAAK,CAAA1F,SAAS,CAAC0F,CAAC,CAACoB,MAAM,CAACC,KAAK,CAAC,EAAC,CAAA5B,QAAA,cAClDrG,IAAA,CAACT,KAAK,GAAE,CAAC,CACF,CAAC,cAGZS,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,WAAW,CACjBS,QAAQ,CAAE,SAAAA,SAACnB,CAAC,QAAK,CAAA1E,mBAAmB,CAAC0E,CAAC,CAACoB,MAAM,CAACC,KAAK,CAAC,EAAC,CAAA5B,QAAA,cAC5DrG,IAAA,CAACT,KAAK,GAAE,CAAC,CACF,CAAC,cAGZS,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,WAAW,CACjBS,QAAQ,CAAE,SAAAA,SAACnB,CAAC,QAAK,CAAAtF,SAAS,CAACsF,CAAC,CAACoB,MAAM,CAACC,KAAK,CAAC,EAAC,CAAA5B,QAAA,cAClDrG,IAAA,CAACT,KAAK,GAAE,CAAC,CACF,CAAC,cAEZS,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,cAAc,CACpBS,QAAQ,CAAE,SAAAA,SAACnB,CAAC,QAAK,CAAAhE,aAAa,CAACgE,CAAC,CAACoB,MAAM,CAACC,KAAK,CAAC,EAAC,CAAA5B,QAAA,cACtDrG,IAAA,CAACT,KAAK,GAAE,CAAC,CACF,CAAC,cAEZS,IAAA,CAACV,IAAI,CAAC+H,IAAI,EAACC,KAAK,CAAC,QAAQ,CAAAjB,QAAA,cACrBrG,IAAA,CAACd,MAAM,EACHgJ,IAAI,CAAC,SAAS,CACdC,OAAO,CAAEtG,SAAU,CACnBuG,OAAO,CAAE3D,YAAa,CAAA4B,QAAA,CAAC,QAE3B,CAAQ,CAAC,CACF,CAAC,EACV,CAAC,cAGPnG,KAAA,QAAK8G,SAAS,CAAC,eAAe,CAAAX,QAAA,eAC1BrG,IAAA,OAAAqG,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBnG,KAAA,OAAAmG,QAAA,eACInG,KAAA,OAAAmG,QAAA,eACIrG,IAAA,WAAAqG,QAAA,CAAQ,UAAQ,CAAQ,CAAC,4JAC7B,EAAI,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACIrG,IAAA,WAAAqG,QAAA,CAAQ,iBAAe,CAAQ,CAAC,wJACpC,EAAI,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACIrG,IAAA,WAAAqG,QAAA,CAAQ,cAAY,CAAQ,CAAC,2HAAwH,cAAArG,IAAA,CAAAI,SAAA,EAAAiG,QAAA,CAAE,yBAAuB,CAAE,CAAC,iBACrL,EAAI,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACIrG,IAAA,WAAAqG,QAAA,CAAQ,YAAU,CAAQ,CAAC,qHAAkH,cAAArG,IAAA,CAAAI,SAAA,EAAAiG,QAAA,CAAE,yBAAuB,CAAE,CAAC,qCAC7K,EAAI,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACIrG,IAAA,WAAAqG,QAAA,CAAQ,YAAU,CAAQ,CAAC,sFAC/B,EAAI,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACIrG,IAAA,WAAAqG,QAAA,CAAQ,eAAa,CAAQ,CAAC,qFAClC,EAAI,CAAC,EACL,CAAC,cACLrG,IAAA,MAAAqG,QAAA,CAAG,oQAAkQ,CAAG,CAAC,cAEzQrG,IAAA,MAAAqG,QAAA,CAAG,8CAA4C,CAAG,CAAC,cAEnDnG,KAAA,OAAAmG,QAAA,eACInG,KAAA,OAAAmG,QAAA,eACInG,KAAA,WAAAmG,QAAA,EAAQ,GAAC,cAAArG,IAAA,MAAGqI,IAAI,CAAC,oFAAoF,CAAAhC,QAAA,CAAC,WAAS,CAAG,CAAC,oEAAiE,EAAQ,CAAC,wGAGjM,EAAI,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACInG,KAAA,WAAAmG,QAAA,eAAQrG,IAAA,MAAGqI,IAAI,CAAC,oFAAoF,CAAAhC,QAAA,CAAC,SAAO,CAAG,CAAC,IAAC,EAAQ,CAAC,wDACrE,cAAArG,IAAA,MAAGqI,IAAI,CAAC,uDAAuD,CAAAhC,QAAA,CAAC,MAAI,CAAG,CAAC,EAC7H,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACInG,KAAA,WAAAmG,QAAA,eAAQrG,IAAA,MAAGqI,IAAI,CAAC,oFAAoF,CAAAhC,QAAA,CAAC,WAAS,CAAG,CAAC,IAAC,EAAQ,CAAC,uGACxB,cAAArG,IAAA,MAAGqI,IAAI,CAAC,sEAAsE,CAAAhC,QAAA,CAAC,MAAI,CAAG,CAAC,EAC3L,CAAC,cACLnG,KAAA,OAAAmG,QAAA,eACInG,KAAA,WAAAmG,QAAA,eAAQrG,IAAA,MAAGqI,IAAI,CAAC,oFAAoF,CAAAhC,QAAA,CAAC,cAAY,CAAG,CAAC,IAAC,EAAQ,CAAC,mJACiB,cAAArG,IAAA,MAAGqI,IAAI,CAAC,iDAAiD,CAAAhC,QAAA,CAAC,MAAI,CAAG,CAAC,EAClN,CAAC,EACL,CAAC,EAEJ,CAAC,EAEL,CAAC,cAENnG,KAAA,QAAK8G,SAAS,CAAC,cAAc,CAAAX,QAAA,eACzBrG,IAAA,WAAAqG,QAAA,CAAQ,sCAAoC,CAAQ,CAAC,CACpD9D,SAAS,CAACF,IAAI,EAAIE,SAAS,CAACH,OAAO,eAAIpC,IAAA,CAACmG,SAAS,EAAC/D,OAAO,CAAEG,SAAS,CAACH,OAAQ,CAACC,IAAI,CAAEE,SAAS,CAACF,IAAK,CAAE,CAAC,EACtG,CAAC,cAGNnC,KAAA,QAAK8G,SAAS,CAAC,oBAAoB,CAAAX,QAAA,eAC/BrG,IAAA,WAAAqG,QAAA,CAAQ,gBAAc,CAAQ,CAAC,cAC/BrG,IAAA,QAAKgH,SAAS,CAAC,cAAc,CAAAX,QAAA,CACxB5E,QAAQ,CAACmC,KAAK,CAAC,IAAI,CAAC,CAACI,GAAG,CAAC,SAACsE,IAAI,CAAE/B,KAAK,qBAClCvG,IAAA,QAAKgH,SAAS,CAAC,eAAe,CAAAX,QAAA,CACzBiC,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,cACfrI,KAAA,CAAAE,SAAA,EAAAiG,QAAA,eACArG,IAAA,SAAMgH,SAAS,CAAC,kBAAkB,CAAAX,QAAA,CAC7BiC,IAAI,CAAC1E,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACjB,CAAC,cACH5D,IAAA,SAAMgH,SAAS,CAAC,MAAM,CAAAX,QAAA,CACrBiC,IAAI,CAAC1E,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACjB,CAAC,EACL,CAAC,CAEH0E,IACH,EAZ+B/B,KAa/B,CAAC,EACT,CAAC,CACD,CAAC,EACL,CAAC,EACL,CAAC,CAEd,CAEA,cAAe,CAAAlG,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}