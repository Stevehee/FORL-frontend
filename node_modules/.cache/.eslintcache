[{"/Users/hechengxin/Desktop/FORL-frontend/src/index.js":"1","/Users/hechengxin/Desktop/FORL-frontend/src/App.js":"2","/Users/hechengxin/Desktop/FORL-frontend/src/reportWebVitals.js":"3"},{"size":492,"mtime":1697682030574,"results":"4","hashOfConfig":"5"},{"size":11003,"mtime":1698030159305,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1697680251713,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mtwp9a",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hechengxin/Desktop/FORL-frontend/src/index.js",[],[],"/Users/hechengxin/Desktop/FORL-frontend/src/App.js",["18","19","20","21","22","23","24","25","26","27"],[],"import React, { useState } from 'react';\nimport './App.css';\nimport {PlusOutlined, UploadOutlined} from '@ant-design/icons';\n\nimport {\n    Button,\n    Cascader,\n    Checkbox,\n    DatePicker,\n    Form,\n    Input,\n    InputNumber,\n    Radio,\n    Select,\n    Slider,\n    Switch,\n    TreeSelect,\n    Upload,\n} from 'antd';\n\n\nfunction App() {\n    const [file, setFile] = useState(null);\n    const [param1, setParam1] = useState('');\n    const [param2, setParam2] = useState('');\n    const [param3, setParam3] = useState('');\n    const [response, setResponse] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [additionalParams, setAdditionalParams] = useState('');\n    const [tableData, setTableData] = useState({ headers: [], data: [] });\n    const [numOfRules, setNumOfRules] = useState('');\n\n\n\n\n    const parseFile =  async (file) => {\n        const content = await file.text();\n        const rows = content.split('\\n').filter(row => row).slice(0, 10); // slice(0, 10) to get only the top 10 rows\n        const headers = rows[0].split(','); // Assuming CSV format\n        const data = rows.slice(1).map(row => row.split(','));\n\n        setTableData({ headers, data });\n    };\n\n\n\n    const handleFileChange = (file) => {\n        setFile(file);\n        parseFile(file).then(()=>{console.log(\"file uploaded\")});\n    };\n\n    const handleSubmit = async () => {\n        setIsLoading(true);\n\n        const formData = new FormData();\n        formData.append('file', file);\n\n        // Parsing the additionalParams to append to the URL\n        const paramsArray = additionalParams.split(',')\n            .filter(p => p.trim() !== '')\n            .map(p => `args=${p.trim()}`);\n\n        const allParams = [\n            `args=${param1}`,\n            `args=${param2}`,\n            ...paramsArray,\n            `args=${param3}`,\n            `args=${numOfRules}`\n        ].filter(Boolean); // This will remove any falsey values, just in case any parameter is undefined or empty\n\n        const url = `https://first-order-rule-learning-b2b4720fffc6.herokuapp.com/upload?${allParams.join('&')}`;\n\n        try {\n            const res = await fetch(url, {\n                method: 'POST',\n                body: formData,\n            });\n\n            const result = await res.text();\n            setResponse(result);\n        } catch (error) {\n            console.error('Error uploading file:', error);\n            setResponse('Error uploading file: ' + error.message);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    function DataTable({ headers, data }) {\n        return (\n            <table>\n                <thead>\n                <tr>\n                    {headers.map((header, index) => <th key={index}>{header}</th>)}\n                </tr>\n                </thead>\n                <tbody>\n                {data.map((row, rowIndex) => (\n                    <tr key={rowIndex}>\n                        {row.map((cell, cellIndex) => <td key={cellIndex}>{cell}</td>)}\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        );\n    }\n\n    const normFile = (e) => {\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e?.fileList;\n    };\n\n\n    return (\n        <div className=\"app-container\">\n            <header className=\"app-header\">\n                First-order Rule Learner\n            </header>\n\n            <div className=\"introduction-box\">\n                <h2>Welcome to the First-Order Rule Learner</h2>\n                <p>This tool utilizes the FOIL (First-Order Inductive Learner) algorithm to derive first-order rules in the form of Horn clauses from relational datasets. Please note that the current version is optimized for categorical data.</p>\n            </div>\n\n            <div className=\"App\">\n                <Form\n                    labelCol={{ span: 4 }}\n                    wrapperCol={{ span: 10 }}\n                    layout=\"horizontal\"\n                >\n                    <Form.Item label=\"Upload\" valuePropName=\"fileList\" getValueFromEvent={normFile}>\n                        <Upload beforeUpload={(file) => {\n                                handleFileChange((file)) ;\n                                return false} }\n                                multiple=\"false\"\n                                maxCount={1}\n                                listType=\"picture-card\"\n                        >\n                            <div>\n                                <PlusOutlined />\n                                <div style={{ marginTop: 8 }}>Upload</div>\n                            </div>\n                        </Upload>\n                    </Form.Item>\n\n                    <Form.Item label=\"Target Literal\"\n                               onChange={(e) => setParam1(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Num of args\"\n                               onChange={(e) => setParam2(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Arguments\"\n                               onChange={(e) => setAdditionalParams(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n\n                    <Form.Item label=\"Rule Size\"\n                               onChange={(e) => setParam3(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item label=\"Num of Rules\"\n                               onChange={(e) => setNumOfRules(e.target.value)}>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item label=\"Submit\">\n                        <Button\n                            type=\"primary\"\n                            loading={isLoading}\n                            onClick={handleSubmit}>\n                            Upload\n                        </Button>\n                    </Form.Item>\n                </Form>\n\n\n                <div className=\"intro-section\">\n                    <h3>How to Use</h3>\n                    <ol>\n                        <li>\n                            <strong>DataSet:</strong> Upload your relational data in a .csv format. After successful upload, the first 10 rows of your dataset will be showcased in the DataSet section below.\n                        </li>\n                        <li>\n                            <strong>Target Literal:</strong> Specify the target literal you aim to predict. It typically represents a column in your dataset and serves as the positive literal in a Horn Clause.\n                        </li>\n                        <li>\n                            <strong>Num of Args:</strong> Indicate the number of arguments for your target literal. For instance, isGreater(X) contains a single argument, while <>Education(X, Bachelors)</> contains two.\n                        </li>\n                        <li>\n                            <strong>Arguments:</strong> Provide any additional arguments you'd like to set for the target literal. For example, if the target literal is <>Education(X, Bachelors)</>, input 'Bachelors' in this field.\n                        </li>\n                        <li>\n                            <strong>Rule Size:</strong> Define the number of (negative) literals in the first order rule you wish to learn\n                        </li>\n                        <li>\n                            <strong>Num of Rules:</strong> Set the upper limit for the number of rules you'd like the algorithm to generate.\n                        </li>\n                    </ol>\n                    <p>After setting your preferences, proceed to initiate the learning process. Learned rules will be displayed in the bottom section with their empirical probability. (Larger dataset like Adult.csv might take a while to finish if you wish to learn multiple rules)</p>\n\n                    <p>Here are some available DataSet you can use:</p>\n\n                    <ol>\n                        <li>\n                            <strong> <a href=\"https://drive.google.com/file/d/103Lh1MC24oDpLSuIVow3BewFPRXN4OxU/view?usp=sharing\">Adult.csv</a> (Target Literal: isGreater, Num of Args: 1, Arguments: (empty)) </strong>\n                            Predict whether income exceeds $50K/yr based on census data. Also known as \"Census Income\" dataset.\n\n                        </li>\n                        <li>\n                            <strong><a href=\"https://drive.google.com/file/d/1DISTIC0lIXsjjvWBXk9gN7K-7ur89Ot1/view?usp=sharing\">Car.csv</a> </strong>\n                            Used to predict the quality of a Car. Find more info <a href=\"https://archive.ics.uci.edu/dataset/19/car+evaluation\">here</a>\n                        </li>\n                        <li>\n                            <strong><a href=\"https://drive.google.com/file/d/11tGaRIkIT1IxB56C1TVLcXaxiJUetOEa/view?usp=sharing\">House.csv</a> </strong>\n                            1984 United Stated Congressional Voting Records; Classify as Republican or Democrat. Find more info <a href=\"https://archive.ics.uci.edu/dataset/105/congressional+voting+records\">here</a>\n                        </li>\n                        <li>\n                            <strong><a href=\"https://drive.google.com/file/d/1H7lwSgg3siikVKcbWALGRi59TaCheQje/view?usp=sharing\">Mushroom.csv</a> </strong>\n                            From Audobon Society Field Guide; mushrooms described in terms of physical characteristics; classification: poisonous or edible. Find more info <a href=\"https://archive.ics.uci.edu/dataset/73/mushroom\">here</a>\n                        </li>\n                    </ol>\n\n                </div>\n\n            </div>\n\n            <div className=\"data-section\">\n                <strong>Dataset (displaying first ten rows):</strong>\n                {tableData.data && tableData.headers && <DataTable headers={tableData.headers} data={tableData.data} />}\n            </div>\n\n\n            <div className=\"response-container\">\n                <strong>Rules Learned:</strong>\n                <div className=\"response-box\">\n                    {response.split('\\n').map((line, index) => (\n                        <div className=\"response-line\" key={index}>\n                            {line.includes(':') ? (\n                                <>\n                                <span className=\"confidence-value\">\n                                    {line.split(':')[0]}\n                                </span>\n                                    <span className=\"rule\">\n                                    {line.split(':')[1]}\n                                </span>\n                                </>\n                            ) : (\n                                line\n                            )}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/Users/hechengxin/Desktop/FORL-frontend/src/reportWebVitals.js",[],[],{"ruleId":"28","severity":1,"message":"29","line":3,"column":23,"nodeType":"30","messageId":"31","endLine":3,"endColumn":37},{"ruleId":"28","severity":1,"message":"32","line":7,"column":5,"nodeType":"30","messageId":"31","endLine":7,"endColumn":13},{"ruleId":"28","severity":1,"message":"33","line":8,"column":5,"nodeType":"30","messageId":"31","endLine":8,"endColumn":13},{"ruleId":"28","severity":1,"message":"34","line":9,"column":5,"nodeType":"30","messageId":"31","endLine":9,"endColumn":15},{"ruleId":"28","severity":1,"message":"35","line":12,"column":5,"nodeType":"30","messageId":"31","endLine":12,"endColumn":16},{"ruleId":"28","severity":1,"message":"36","line":13,"column":5,"nodeType":"30","messageId":"31","endLine":13,"endColumn":10},{"ruleId":"28","severity":1,"message":"37","line":14,"column":5,"nodeType":"30","messageId":"31","endLine":14,"endColumn":11},{"ruleId":"28","severity":1,"message":"38","line":15,"column":5,"nodeType":"30","messageId":"31","endLine":15,"endColumn":11},{"ruleId":"28","severity":1,"message":"39","line":16,"column":5,"nodeType":"30","messageId":"31","endLine":16,"endColumn":11},{"ruleId":"28","severity":1,"message":"40","line":17,"column":5,"nodeType":"30","messageId":"31","endLine":17,"endColumn":15},"no-unused-vars","'UploadOutlined' is defined but never used.","Identifier","unusedVar","'Cascader' is defined but never used.","'Checkbox' is defined but never used.","'DatePicker' is defined but never used.","'InputNumber' is defined but never used.","'Radio' is defined but never used.","'Select' is defined but never used.","'Slider' is defined but never used.","'Switch' is defined but never used.","'TreeSelect' is defined but never used."]